#region Copyright
// This is an unpublished work protected under the copyright laws of the United
// States and other countries.  All rights reserved.  Should publication occur
// the following will apply: © 2015 GameTech International, Inc.
#endregion

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Windows;
using GameTech.Elite.Base;
using GameTech.Elite.UI;
using GameTech.Elite.Client.Modules.B3Center.Business;
using GameTech.Elite.Client.Modules.B3Center.Properties;
using System.Linq;
using GameTech.Elite.Client.Modules.B3Center.UI.SettingViews;
using System.Windows.Controls;
using GameTech.Elite.Client.Modules.B3Center.ViewModels.Settings;
using GameTech.Elite.Client.Modules.B3Center.Model.Setting;

namespace GameTech.Elite.Client.Modules.B3Center.ViewModels
{
    class SettingViewModel : ViewModelBase
    {

        private static volatile SettingViewModel m_instance;
        private static readonly object m_syncRoot = new Object();
        private B3Controller m_controller;

        private GameSettingView m_gameSettingView;// = new GameSettingView();
        private SystemSettingView m_systemSettingView;// = new SystemSettingView();
        private ServerGameSettingView m_serverGameSettingView;// = new ServerGameSettingView();
        private SalesSettingView m_salesSettingView;// = new SalesSettingView();
        private PlayerSettingView m_playerSettingView;// = new PlayerSettingView();
        private SessionSettingView m_sessionSettingView;// = new SessionSettingView();
        //private  OperatorView m_operatorView;


        private ServerSetting m_serverSetting;

        private SettingViewModel()
        {
          //  m_serverSetting = serverSetting;
        }


        private ServerSetting TranslateThisSettingToServerSettingModel(List<B3SettingGlobal> m_B3Settings)
        {
            m_serverSetting = new ServerSetting();
            m_serverSetting.MinPlayer = Convert.ToInt32(m_B3Settings[0].B3SettingValue).ToString();
            m_serverSetting.GameStartDelay= Convert.ToInt32(m_B3Settings[1].B3SettingValue).ToString();
            m_serverSetting.Consolation = Convert.ToDecimal(m_B3Settings[2].B3SettingValue).ToString();
            m_serverSetting.GameRecallPassw = m_B3Settings[3].B3SettingValue.ToString();
            m_serverSetting.WaitCountDown= Convert.ToInt32(m_B3Settings[4].B3SettingValue).ToString();
        
            return m_serverSetting;
        }

        public static SettingViewModel Instance
        {
            get
            {
                if (m_instance == null)
                {
                    lock (m_syncRoot)
                    {
                        if (m_instance == null)
                            m_instance = new SettingViewModel();
                    }
                }

                return m_instance;
            }
        }

        public void Initialize(B3Controller controller)
        {
            if (controller == null)
                throw new ArgumentNullException();

            m_controller = controller;
            B3Setting b3GameSetting = new B3Setting();
            b3GameSetting.B3GameSetting_ = Settings.B3GameSetting_;//Game enabled 
            b3GameSetting.B3SettingGlobal_ = Settings.B3SettingGlobal_;//All settings
            b3GameSetting.ListB3mathGamePlay_ = Settings.B3GameMathPlay_;
            m_gameSettingView = new GameSettingView();// m_gameSettingView = new GameSettingView(b3GameSetting);
            m_systemSettingView = new SystemSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 7).ToList());
            m_playerSettingView = new PlayerSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 3).ToList());
            m_salesSettingView = new SalesSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 4).ToList());
            m_sessionSettingView = new SessionSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 6).ToList());
            //m_operatorView = new OperatorView();

            m_serverSetting = TranslateThisSettingToServerSettingModel(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 5).ToList());
            m_serverGameSettingView = new ServerGameSettingView();
          //  m_serverGameSettingView = new ServerGameSettingView(GetServerSetting( b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 5).ToList()));
            if (IsClassIIB3GameEnable == true)
            {
                //m_serverGameSettingView = new ServerGameSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 5).ToList());
                //ServerGameSettingToggleButton.Visibility = Visibility.Visible;
            }
            else
            {
                //ServerGameSettingToggleButton.Visibility = Visibility.Collapsed;
            }
            LoadSetting();
            SetCommand();
        }

        private ServerSettingVm m_serverSettingVm;
        public ServerSettingVm ServerSetting_Vm { get; set; }

        private ServerSetting GetServerSetting(List<B3SettingGlobal> B3Settings)
        {
            ServerSetting tempR = new ServerSetting();
            foreach(B3SettingGlobal s in B3Settings)
            {
               switch (s.B3SettingID)
                {
                    case 34:
                        {

                            break;
                        }
                }
            }


            return tempR;
        }

        private void SetCommand()
        {
            SaveSettingcmd = new RelayCommand(parameter => SaveSetting());
        }


        public ICommand SaveSettingcmd { get; set; }




        public void SaveSetting()
        {
            

        }



        private List<string> m_settingList = new List<string>();

        public List<string> SettingList
        {
            get { return m_settingList; }
        }

        private int m_borderValue;

        public int SetBorderValue
        {
            get { return m_borderValue; }
            set
            {
                if (m_borderValue != value)
                {
                    m_borderValue = value;
                    RaisePropertyChanged("SetBorderValue");
                }
            }
        }

        public void LoadSetting()
        {
            m_settingList.Clear();
            m_settingList.Add("Games");
            m_settingList.Add("System");
            m_settingList.Add("Player");
            m_settingList.Add("Sales");
            m_settingList.Add("Session");
            m_settingList.Add("Server Game");
            SettingSelected = m_settingList.FirstOrDefault();

        }

        private string m_settingSelected;

        public  string SettingSelected
        {
            get { return m_settingSelected; }
            set
            {
                m_settingSelected = value;
                RaisePropertyChanged("SettingSelected");
            }
        }



        private UserControl m_selectedSettingView = new UserControl();


        public UserControl SelectedSettingView
        {
            get
            {
                return m_selectedSettingView;
            }
            set
            {

                m_selectedSettingView = value;
                RaisePropertyChanged("SelectedSettingView");
            }
        }

        public void SelectionChanged(string SettingName)
        {

            UserControl view = null;
            if (SettingName == "Games")
            {
                SetBorderValue = 0;
            }
            else
            {
                SetBorderValue = 2;
            }

            switch (SettingName)
            {
                case "Games":
                    {
                        view = m_gameSettingView;
                        break;
                    }
                case "System":
                    {
                        view = m_systemSettingView;
                        break;
                    }
                case "Player":
                    {
                        view = m_playerSettingView;
                        break;
                    }
                case "Sales":
                    {
                        view =m_salesSettingView;
                        break;
                    }
                case "Session":
                    {
                        view = m_sessionSettingView;
                        break;
                    }
                case "Server Game":
                    {
                        view = m_serverGameSettingView;
                        break;
                    }
            }


            SelectedSettingView = view;
        }

        public B3CenterSettings Settings
        {
            get
            {
                if (m_controller == null)
                {
                    return null;
                }

                return m_controller.Settings;
            }
        }

        public ObservableCollection<GameTech.Elite.Client.Modules.B3Center.Business.Operator> Operators
        {
            get
            {
                if (m_controller == null)
                {
                    return null;
                }

                return m_controller.Operators;
            }
            set
            {
                //m_controller.Operators
            }
      
        }

        public int StaffId
        {
            get
            {
                if (m_controller == null)
                {

                    return 0;
                }
                else
                {
                    return m_controller.Parent.StaffId;
                }
            }
        }

        public int OperatorId
        {
            get
            {
                if (m_controller == null)
                {

                    return 0;
                }
                else
                {
                    return m_controller.Parent.OperatorId;
                }
            }
        }

        public int MachineId
        {
            get
            {
                if (m_controller == null)
                {

                    return 0;
                }
                else
                {
                    return m_controller.Parent.MachineId;                  
                }
            }
        }

        public bool IsClassIIB3GameEnable
        {
            get
            {        
                return m_controller.Parent.Settings.IsClassIIB3Enable;
            }
        }
    }
}



=================================

<UserControl x:Class="GameTech.Elite.Client.Modules.B3Center.UI.SettingViews.SettingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:Converters=   "clr-namespace:GameTech.Elite.Client.Modules.B3Center.Helpers"
                 xmlns:local="clr-namespace:GameTech.Elite.Client.Modules.B3Center.UI.SettingViews"
             mc:Ignorable="d" 
      
             >
    <UserControl.Resources>
       
    
        <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
            <Setter Property="Margin" Value="0,30,0,0"></Setter>
            <Setter Property="Height" Value="22"/>
        </Style>

        <Style  TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Setter Property="Height" Value="22"/>
        </Style>

        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="Height" Value="22.22"></Setter>
        </Style>

    </UserControl.Resources>
    <Border >
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Name="ColumnSettings" Width="200"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Border Grid.Column="1"  Style="{DynamicResource LightBlueBorder}"  Margin ="4">
                <Grid>
                    <Grid.RowDefinitions>

                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>



                    <Border Grid.Row="0" Margin="8" Style="{DynamicResource LightBlueBorderNoBackGround}" BorderThickness="0">
                        <Border.Resources>
                            <Style
                             TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                                <Setter Property="Padding" Value="0"/>
                                <Setter Property="Margin" Value="0,15,0,2"/>

                            </Style>
                        </Border.Resources>
                        <ContentPresenter  Name="SettingTransitionControl" Content="{Binding SelectedSettingView}"/>
                        <!--<local:GameSettingView ></local:GameSettingView>-->
                    </Border>

                    <Border Grid.Row="1"  Margin="8">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                                <RowDefinition/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>

                            <Border Grid.Row="0" x:Name="errBackground" Margin="0,5" Style="{DynamicResource SemiTransparentNoBorder}" VerticalAlignment="bottom" Visibility="Hidden">
                                <StackPanel Orientation="Horizontal">
                                    <Ellipse x:Name="errIcon" Fill="{DynamicResource ErrorIcon}" Width="20" Height="20" />
                                    <Label x:Name="txtblckErr" FontWeight="Bold" />
                                </StackPanel>
                            </Border>

                            <Border Grid.Row="1" Style="{DynamicResource SemiTransparentBorder}" >
                                <Grid Grid.Column="1" Grid.Row="14">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Button Grid.Column="0"
                                Margin="15,15" Height="40" Width="140" 
                                Content="Save"
                                HorizontalAlignment="Right" 
                                x:Name="btnSave"
                                VerticalAlignment="Top"
                             Command="{Binding SaveSettingcmd}"
                                Tag="1"/>
                                    <!--Click="btnSave_Click"-->
                                    <Button Grid.Column="1"
                                Margin="15,15" Height="40" Width="140" 
                                Content="Cancel"
                                HorizontalAlignment="Left"
                                Name="btnCancel" 
                                VerticalAlignment="Top"
                            />
                                    <!--Click="btnCancel_Click"-->

                                </Grid>
                            </Border>
                            <Border Grid.Row="2" Margin="0,5" Style="{DynamicResource SemiTransparentNoBorder}" VerticalAlignment="bottom">
                                <Label HorizontalAlignment="Left" Content="* Indicates a required field" Foreground="Red"/>
                            </Border>


                        </Grid>
                    </Border>


                </Grid>
            </Border>



                <Border Name="brdrSettingMenuCol" Grid.Column="0"  Style="{DynamicResource DarkBlueBorder}" Margin="4">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition></RowDefinition>
                    </Grid.RowDefinitions>

                    <ScrollViewer Grid.Row="0" Grid.Column="0"  VerticalScrollBarVisibility="Auto" >
                        <ListBox Name="lstbx_SettingList" Margin="15"   ItemsSource="{Binding SettingList}" SelectedItem="{Binding SettingSelected}" SelectionChanged="ListBox_SelectionChanged" >
                        
                        </ListBox>
                    </ScrollViewer>
                </Grid>
            </Border>
        </Grid>
    </Border>
</UserControl>


<!--<ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/OriginalStyle.xaml"></ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="VisibilityConverter" />
            <Converters:ValueToBoolConverter x:Key="ConvertValueToBool" />
        </ResourceDictionary>-->
<!--<BooleanToVisibilityConverter x:Key="VisibilityConverter" />-->


=================================

using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using GameTech.Elite.Client.Modules.B3Center.ViewModels;
using GameTech.Elite.Client.Modules.B3Center.Business;
using System.Linq;
using System.Collections.ObjectModel;

namespace GameTech.Elite.Client.Modules.B3Center.UI.SettingViews
{
    /// <summary>
    /// Interaction logic for SettingView.xaml
    /// </summary>
    public partial class SettingView //: UserControl
    {

        private readonly GameSettingView m_gamesView;
        private readonly SystemSettingView m_systemSettingView;
        private readonly PlayerSettingView m_playerSettingView;
        private readonly SalesSettingView m_salesSettingView;
        private readonly SessionSettingView m_sessionView;
        private readonly ServerGameSettingView m_serverGameView;
        //private readonly OperatorView m_operatorView;
        private readonly List<ToggleButton> m_menuItems;
        private B3Setting m_B3Setting;
        private Button m_btnSave;
        private Button m_btnBackOperatorSetting;
        private Button m_btnBackOperatorSettingFromGameSetting;
        private ToggleButton m_toggleButton;

        //public Button btnSave
        //{
        //    get { return m_btnSave; }
        //    set { m_btnSave = value; }
        //}

        public Button btnbtnBackOperatorSetting
        {
            get { return m_btnBackOperatorSetting; }
            set { m_btnBackOperatorSetting = value; }
        }

        public Button btnBackOperatorSettingFromGameSetting
        {
            get { return m_btnBackOperatorSettingFromGameSetting; }
            set { m_btnBackOperatorSettingFromGameSetting = value; }
        }

        public B3Setting B3_Setting
        {
            get { return m_B3Setting; }
            set { m_B3Setting = value; }
        }




        public SettingView()
        {
            InitializeComponent();
            //B3Setting b3GameSetting = new B3Setting();
            //b3GameSetting.B3GameSetting_ = SettingViewModel.Instance.Settings.B3GameSetting_;//Game enabled 
            //b3GameSetting.B3SettingGlobal_ = SettingViewModel.Instance.Settings.B3SettingGlobal_;//All settings
            //b3GameSetting.ListB3mathGamePlay_ = SettingViewModel.Instance.Settings.B3GameMathPlay_;
            //m_gamesView = new GameSettingView(b3GameSetting);
            //m_systemSettingView = new SystemSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 7).ToList());
            //m_playerSettingView = new PlayerSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 3).ToList());
            //m_salesSettingView = new SalesSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 4).ToList());
            //m_sessionView = new SessionSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 6).ToList());
            //m_operatorView = new OperatorSettingView();

            //if (SettingViewModel.Instance.IsClassIIB3GameEnable == true)
            //{
            //    m_serverGameView = new ServerGameSettingView(b3GameSetting.B3SettingGlobal_.Where(l => l.B3SettingCategoryID == 5).ToList());
            //    //ServerGameSettingToggleButton.Visibility = Visibility.Visible;
            //}
            //else
            //{
            //    //ServerGameSettingToggleButton.Visibility = Visibility.Collapsed;
            //}

            //m_menuItems = new List<ToggleButton>
            //{
            //   GameSettingToggleButton,
            //   SystemSettingToggleButton,
            //   PlayerSettingToggleButton,
            //   SalesSettingToggleButton,
            //   SessionSettingToggleButton,
            //   ServerGameSettingToggleButton,
            //   OperatorSettingToggleButton
            //};

            //m_btnSave = m_gamesView.btnSave;
            //m_btnSave.Click += new RoutedEventHandler(m_btnSave_Click);

            //m_btnBackOperatorSetting = m_operatorView.btnBackOperatorSettings;
            //m_btnBackOperatorSetting.Click += new RoutedEventHandler(m_btnBackOperatorSetting_Click);

            //m_btnBackOperatorSettingFromGameSetting = m_gamesView.btnBackOperatorSettingsFromGameSettings;
            //m_btnBackOperatorSettingFromGameSetting.Click += new RoutedEventHandler(m_btnBackOperatorSetting_Click);
           
        }


        public void ClearSelected()
        {
            foreach (var menuItem in m_menuItems)
            {
                if (menuItem.IsChecked != null && (bool)menuItem.IsChecked)
                {
                    menuItem.IsChecked = false;
                    //SettingTransitionControl.Content = null;
                }
            }
        }


        #region EVENTS

        private void ListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var viewModel = SettingViewModel.Instance;
            viewModel.SelectionChanged(((ListBox)sender).SelectedValue.ToString());

        }

        void m_btnBackOperatorSetting_Click(object sender, RoutedEventArgs e)
        {
            brdrSettingMenuCol.Visibility = Visibility.Visible;
            ColumnSettings.Width = new GridLength(200, GridUnitType.Pixel);
            ClearSelected();
        }

        //void m_btnSave_Click(object sender, RoutedEventArgs e)
        //{
        //    if (m_toggleButton.Name == "GameSettingToggleButton")
        //    {
        //        m_B3Setting = m_gamesView.B3_Setting;
        //    }          
        //}

        

        private void MenuToggleButton_Changed(object sender, RoutedEventArgs e)
        {


            var toggleButton = sender as ToggleButton;
            m_toggleButton = toggleButton;

            if (toggleButton == null)
            {
                return;
            }

            UserControl view = null;

            switch (toggleButton.Name)
            {
                case "GameSettingToggleButton":
                    {
                        m_gamesView.ClearSelected();
                        //m_btnSave = m_gamesView.btnSave;
                        //m_btnSave.Click += new RoutedEventHandler(m_btnSave_Click);
                        view = m_gamesView;
                        break;
                    }

                case "SystemSettingToggleButton":
                        {
                            m_systemSettingView.ReloadDataIntoControls();
                            m_btnSave = m_systemSettingView.btnSave;
                            //m_btnSave.Click += new RoutedEventHandler(m_btnSave_Click);
                            view = m_systemSettingView; 
                            break;
                        }
                case "PlayerSettingToggleButton":
                        {
                            m_playerSettingView.ReloadDataIntoControls();
                            view = m_playerSettingView;
                            break;
                        }
                case "SalesSettingToggleButton":
                        {
                            m_salesSettingView.ReloadDataIntoControls();
                            view = m_salesSettingView;
                            break;
                        }
                case "SessionSettingToggleButton":
                        {
                            m_sessionView.ReloadDataIntoControls();
                            view = m_sessionView;
                            break;
                        }
                case "ServerGameSettingToggleButton":
                        {
                            m_serverGameView.ReloadDataIntoControls();
                            view = m_serverGameView;
                            break;
                        }
                //case "OperatorSettingToggleButton":
                //        {
                //            m_operatorView.ClearSelected();
                //            view = m_operatorView;                                                
                //            break;
                //        }                    
            }


            if (toggleButton.IsChecked == true)
            {
                foreach (var menuItem in m_menuItems)
                {
                    if (Equals(menuItem, toggleButton))
                    {
                        continue;
                    }

                    if (menuItem.IsChecked != null && (bool)menuItem.IsChecked)
                    {
                        menuItem.IsChecked = false;
                    }

                }

                //SettingTransitionControl.Content = view;
            }
            else
            {
                //SettingTransitionControl.Content = null;
            }
        }

        private void OperatorSettingToggleButton_Checked(object sender, RoutedEventArgs e)
        {
            brdrSettingMenuCol.Visibility = Visibility.Collapsed;
            ColumnSettings.Width = GridLength.Auto;
        }

        #endregion

       
    }


    public class B3Setting
    {
        private List<B3GameSetting> m_b3GameSetting;
        public List<B3GameSetting> B3GameSetting_
        {
            get { return m_b3GameSetting; }
            set { m_b3GameSetting = value; }
        }


        private List<B3SettingGlobal> m_b3SettingGlobal;
        public List<B3SettingGlobal> B3SettingGlobal_
        {
            get { return m_b3SettingGlobal; }
            set { m_b3SettingGlobal = value; }
        }

        private List<B3MathGamePay> m_listB3mathGamePlay;
        public List<B3MathGamePay> ListB3mathGamePlay_
        {
            get { return m_listB3mathGamePlay; }
            set { m_listB3mathGamePlay = value; }
        }


    }

    public class ConvertToString
    {
        public static string decimal_(string tempValue)
        {
            decimal result; string outputvalue = "";
            if (!Decimal.TryParse(tempValue, out result))
            {
                outputvalue = "00";
            }
            else if (result == 00.00M)
            {
                outputvalue = "00";
            }
            else
            {
                outputvalue = result.ToString();
            }


            return outputvalue;
        }
    }


}

