


<UserControl x:Class="GameTech.Elite.Client.Modules.B3Center.UI.SettingViews.SettingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:Converters=   "clr-namespace:GameTech.Elite.Client.Modules.B3Center.Helpers"
                 xmlns:local="clr-namespace:GameTech.Elite.Client.Modules.B3Center.UI.SettingViews"
             mc:Ignorable="d" 
         xmlns:CommandSelectionChanged="clr-namespace:GameTech.Elite.Client.Modules.B3Center.Helpers"
             >
    <UserControl.Resources>
       
          
        <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
            <Setter Property="Margin" Value="0,30,0,0"></Setter>
            <Setter Property="Height" Value="22"/>
        </Style>

        <Style  TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Setter Property="Height" Value="22"/>
        </Style>

        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="Height" Value="22.22"></Setter>
        </Style>

    </UserControl.Resources>
    <Border >
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Name="ColumnSettings" Width="200"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Border Grid.Column="1"  Style="{DynamicResource LightBlueBorder}"  Margin ="4">
                <Grid>
                    <Grid.RowDefinitions>

                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>



                    <Border Grid.Row="0" Margin="8" Style="{DynamicResource LightBlueBorderNoBackGround}" BorderThickness="0"  >
                        <Border.Resources>
                            <Style
                             TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                                <Setter Property="Padding" Value="0"/>
                                <Setter Property="Margin" Value="0,15,0,2"/>
                            </Style>
                        </Border.Resources>
                        <ContentPresenter Content="{Binding SelectedSettingView}" />
                        <!--<local:GameSettingView ></local:GameSettingView>-->
                    </Border>

                    <Border Grid.Row="1"  Margin="8">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                                <RowDefinition/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>

                            <Border Grid.Row="0" x:Name="errBackground" Margin="0,5" Style="{DynamicResource SemiTransparentNoBorder}" VerticalAlignment="bottom" Visibility="Hidden">
                                <StackPanel Orientation="Horizontal">
                                    <Ellipse x:Name="errIcon" Fill="{DynamicResource ErrorIcon}" Width="20" Height="20" />
                                    <Label x:Name="txtblckErr" FontWeight="Bold" />
                                </StackPanel>
                            </Border>

                            <Border Grid.Row="1" Style="{DynamicResource SemiTransparentBorder}" >
                                <Grid Grid.Column="1" Grid.Row="14">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    
                                    
                                <Button  
                                    Grid.Column="0"
                                    Margin="15,15" Height="40" Width="140"     
                                    Content="Save"
                                    HorizontalAlignment="Right" 
                                    x:Name="btnSave"
                                    VerticalAlignment="Top"
                                    Command="{Binding SaveSettingcmd}"                                 
                                    Tag="1">                    
                                </Button>
                                    <!--Content="{Binding IsEditOrSave}"-->
                                    <!--Focusable="{Binding IsFocus,  UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"-->

                                    <Button 
                                    Grid.Column="1"
                                    Margin="15,15" Height="40" Width="140" 
                                    Content="Cancel"
                                    HorizontalAlignment="Left"
                                    Name="btnCancel" 
                                    VerticalAlignment="Top"
                                    Command="{Binding CancelSettingcmd}"  
                                    Focusable="False"
                                 />
                                    

                                </Grid>
                            </Border>
                            <Border Grid.Row="2" Margin="0,5" Style="{DynamicResource SemiTransparentNoBorder}" VerticalAlignment="bottom">
                                <Label HorizontalAlignment="Left" Content="* Indicates a required field" Foreground="Red"/>
                            </Border>


                        </Grid>
                    </Border>


                </Grid>
            </Border>



                <Border Name="brdrSettingMenuCol" Grid.Column="0"  Style="{DynamicResource DarkBlueBorder}" Margin="4">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition></RowDefinition>
                    </Grid.RowDefinitions>
                
                    <ScrollViewer Grid.Row="0" Grid.Column="0"  VerticalScrollBarVisibility="Auto" >
                        <ListBox Name="lstbx_SettingList" Margin="15"   ItemsSource="{Binding SettingList}" SelectedItem="{Binding SettingSelected}" SelectionChanged="lstbx_SettingList_SelectionChanged"  >                         
                          </ListBox>
                    </ScrollViewer>
                </Grid>
            </Border>
        </Grid>
    </Border>
</UserControl>

<!--<ListBox Name="lstbx_SettingList" Margin="15"   ItemsSource="{Binding SettingList}" SelectedItem="{Binding SettingSelected}" SelectionChanged="ListBox_SelectionChanged" >-->







using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using GameTech.Elite.Client.Modules.B3Center.ViewModels;
using GameTech.Elite.Client.Modules.B3Center.Business;
using System.Linq;
using System.Collections.ObjectModel;

namespace GameTech.Elite.Client.Modules.B3Center.UI.SettingViews
{
    /// <summary>
    /// Interaction logic for SettingView.xaml
    /// </summary>
    public partial class SettingView //: UserControl
    {

        private readonly GameSettingView m_gamesView;
        private readonly SystemSettingView m_systemSettingView;
        private readonly PlayerSettingView m_playerSettingView;
        private readonly SalesSettingView m_salesSettingView;
        private readonly SessionSettingView m_sessionView;
        private readonly ServerGameSettingView m_serverGameView;
        //private readonly OperatorView m_operatorView;
        private readonly List<ToggleButton> m_menuItems;
        private B3Setting m_B3Setting;
        private Button m_btnSave;
        private Button m_btnBackOperatorSetting;
        private Button m_btnBackOperatorSettingFromGameSetting;
        private ToggleButton m_toggleButton;

        public Button btnbtnBackOperatorSetting
        {
            get { return m_btnBackOperatorSetting; }
            set { m_btnBackOperatorSetting = value; }
        }

        public Button btnBackOperatorSettingFromGameSetting
        {
            get { return m_btnBackOperatorSettingFromGameSetting; }
            set { m_btnBackOperatorSettingFromGameSetting = value; }
        }

        public B3Setting B3_Setting
        {
            get { return m_B3Setting; }
            set { m_B3Setting = value; }
        }

        public SettingView()
        {
            InitializeComponent();
          
        }


        public void ClearSelected()
        {
            foreach (var menuItem in m_menuItems)
            {
                if (menuItem.IsChecked != null && (bool)menuItem.IsChecked)
                {
                    menuItem.IsChecked = false;
                }
            }
        }


        private void lstbx_SettingList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        #region EVENTS



        void m_btnBackOperatorSetting_Click(object sender, RoutedEventArgs e)
        {
            brdrSettingMenuCol.Visibility = Visibility.Visible;
            ColumnSettings.Width = new GridLength(200, GridUnitType.Pixel);
            ClearSelected();
        }

     
        private void MenuToggleButton_Changed(object sender, RoutedEventArgs e)
        {
            var toggleButton = sender as ToggleButton;
            m_toggleButton = toggleButton;

            if (toggleButton == null)
            {
                return;
            }

            UserControl view = null;

            switch (toggleButton.Name)
            {
                case "GameSettingToggleButton":
                    {
                      
                        //m_btnSave = m_gamesView.btnSave;
                        //m_btnSave.Click += new RoutedEventHandler(m_btnSave_Click);
                        view = m_gamesView;
                        break;
                    }

                case "SystemSettingToggleButton":
                        {
                            view = m_systemSettingView; 
                            break;
                        }
                case "PlayerSettingToggleButton":
                        {
                      
                            view = m_playerSettingView;
                            break;
                        }
                case "SalesSettingToggleButton":
                        {
                       
                            view = m_salesSettingView;
                            break;
                        }
                case "SessionSettingToggleButton":
                        {
                        
                            view = m_sessionView;
                            break;
                        }
                case "ServerGameSettingToggleButton":
                        {
  
                            view = m_serverGameView;
                            break;
                        }
                //case "OperatorSettingToggleButton":
                //        {
                //            m_operatorView.ClearSelected();
                //            view = m_operatorView;                                                
                //            break;
                //        }                    
            }


            if (toggleButton.IsChecked == true)
            {
                foreach (var menuItem in m_menuItems)
                {
                    if (Equals(menuItem, toggleButton))
                    {
                        continue;
                    }

                    if (menuItem.IsChecked != null && (bool)menuItem.IsChecked)
                    {
                        menuItem.IsChecked = false;
                    }
                }

                //SettingTransitionControl.Content = view;
            }
            else
            {
                //SettingTransitionControl.Content = null;
            }
        }

        private void OperatorSettingToggleButton_Checked(object sender, RoutedEventArgs e)
        {
            brdrSettingMenuCol.Visibility = Visibility.Collapsed;
            ColumnSettings.Width = GridLength.Auto;
        }

        #endregion

       
    }


  


}

